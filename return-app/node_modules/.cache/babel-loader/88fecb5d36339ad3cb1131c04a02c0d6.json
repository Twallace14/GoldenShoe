{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tyronewallace/Desktop/Blueprints/returns/src/pages/Returns.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { FetchOrderData, UserOrderSelection, NewReturn } from '../Actions';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { Button, HelpBlock, FormControl, ControlLabel, FormGroup, FlexboxGrid, Form, Panel, IconButton, Icon } from 'rsuite';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport { userOrder } from '../Reducers/userOrder';\nimport activeReturn from '../Reducers/activeReturn';\n\nconst Returns = ({\n  UserOrder,\n  activeOrder,\n  isLoading,\n  startUp,\n  message\n}) => {\n  _s();\n\n  const [userOrderNumber, setuserOrderNumer] = useState('');\n  useEffect(() => {\n    startUp();\n  }, []);\n  const history = useHistory();\n  console.log(userOrderNumber);\n\n  const HandleSubmit = () => {\n    UserOrder(userOrderNumber);\n  };\n\n  const handleNext = () => {\n    history.push('/myreturns');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FlexboxGrid, {\n      justify: \"center\",\n      align: \"middle\",\n      style: {\n        height: 600\n      },\n      children: /*#__PURE__*/_jsxDEV(FlexboxGrid.Item, {\n        colspan: 18,\n        children: /*#__PURE__*/_jsxDEV(Panel, {\n          header: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"returns\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 26\n          }, this),\n          bordered: true,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onChange: formValue => {\n              const value = formValue.orderNumber;\n              setuserOrderNumer(value);\n            },\n            fluid: true,\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(ControlLabel, {\n                children: \"Order number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                name: \"orderNumber\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HelpBlock, {\n                tooltip: true,\n                children: \"Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FlexboxGrid, {\n              justify: \"space-between\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: HandleSubmit,\n                style: {\n                  margin: 7\n                },\n                loading: isLoading ? true : false,\n                disabled: userOrderNumber.length < 10 ? true : false,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), activeOrder ? /*#__PURE__*/_jsxDEV(IconButton, {\n                style: {\n                  margin: 7\n                },\n                onClick: handleNext,\n                icon: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: \"arrow-right\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 27\n                }, this),\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Returns, \"1EVtYSC1MZd1/7OQLHcv5Eqh0/E=\", false, function () {\n  return [useHistory];\n});\n\n_c = Returns;\n\nconst mapStateToProps = state => ({\n  activeOrder: state.activeOrder.userOrder,\n  isLoading: state.activeOrder.loading,\n  message: state.activeOrder.message\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    UserOrder: userOrderNum => dispatch(FetchOrderData(userOrderNum)),\n    startUp: () => dispatch(NewReturn())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Returns);\n\nvar _c;\n\n$RefreshReg$(_c, \"Returns\");","map":{"version":3,"sources":["/Users/tyronewallace/Desktop/Blueprints/returns/src/pages/Returns.js"],"names":["axios","React","useState","useEffect","connect","FetchOrderData","UserOrderSelection","NewReturn","Redirect","useHistory","Button","HelpBlock","FormControl","ControlLabel","FormGroup","FlexboxGrid","Form","Panel","IconButton","Icon","userOrder","activeReturn","Returns","UserOrder","activeOrder","isLoading","startUp","message","userOrderNumber","setuserOrderNumer","history","console","log","HandleSubmit","handleNext","push","height","formValue","value","orderNumber","margin","length","mapStateToProps","state","loading","mapDispatchToProps","dispatch","userOrderNum"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,SAA7C,QAA8D,YAA9D;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC;AAEA,SACEC,MADF,EAEEC,SAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,SALF,EAMEC,WANF,EAOEC,IAPF,EAQEC,KARF,EASEC,UATF,EAUEC,IAVF,QAWO,QAXP;AAaA,OAAO,uCAAP;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA,OAArC;AAA8CC,EAAAA;AAA9C,CAAD,KAA6D;AAAA;;AAC3E,QAAM,CAACC,eAAD,EAAkBC,iBAAlB,IAAuC3B,QAAQ,CAAC,EAAD,CAArD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMI,OAAO,GAAGrB,UAAU,EAA1B;AAEAsB,EAAAA,OAAO,CAACC,GAAR,CAAYJ,eAAZ;;AAEA,QAAMK,YAAY,GAAG,MAAM;AACzBV,IAAAA,SAAS,CAACK,eAAD,CAAT;AACD,GAFD;;AAIA,QAAMM,UAAU,GAAG,MAAM;AACvBJ,IAAAA,OAAO,CAACK,IAAR,CAAa,YAAb;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,OAAO,EAAC,QAArB;AAA8B,MAAA,KAAK,EAAC,QAApC;AAA6C,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAApD;AAAA,6BACE,QAAC,WAAD,CAAa,IAAb;AAAkB,QAAA,OAAO,EAAE,EAA3B;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAf;AAAiC,UAAA,QAAQ,MAAzC;AAAA,iCACE,QAAC,IAAD;AACE,YAAA,QAAQ,EAAGC,SAAD,IAAe;AACvB,oBAAMC,KAAK,GAAGD,SAAS,CAACE,WAAxB;AACAV,cAAAA,iBAAiB,CAACS,KAAD,CAAjB;AACD,aAJH;AAKE,YAAA,KAAK,MALP;AAAA,oCAOE,QAAC,SAAD;AAAA,sCACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,WAAD;AAAa,gBAAA,IAAI,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,SAAD;AAAW,gBAAA,OAAO,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EAaGX,OAAO,iBACN;AAAA,qCACE;AAAA,0BAAKA;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAdJ,eAkBE,QAAC,WAAD;AAAa,cAAA,OAAO,EAAC,eAArB;AAAA,sCACE,QAAC,MAAD;AACE,gBAAA,OAAO,EAAEM,YADX;AAEE,gBAAA,KAAK,EAAE;AAAEO,kBAAAA,MAAM,EAAE;AAAV,iBAFT;AAGE,gBAAA,OAAO,EAAEf,SAAS,GAAG,IAAH,GAAU,KAH9B;AAIE,gBAAA,QAAQ,EAAEG,eAAe,CAACa,MAAhB,GAAyB,EAAzB,GAA8B,IAA9B,GAAqC,KAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAUGjB,WAAW,gBACV,QAAC,UAAD;AACE,gBAAA,KAAK,EAAE;AAAEgB,kBAAAA,MAAM,EAAE;AAAV,iBADT;AAEE,gBAAA,OAAO,EAAEN,UAFX;AAGE,gBAAA,IAAI,eAAE,QAAC,IAAD;AAAM,kBAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,wBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADU,GAQR,IAlBN;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiDD,CApED;;GAAMZ,O;UAOYb,U;;;KAPZa,O;;AAsEN,MAAMoB,eAAe,GAAIC,KAAD,KAAY;AAClCnB,EAAAA,WAAW,EAAEmB,KAAK,CAACnB,WAAN,CAAkBJ,SADG;AAElCK,EAAAA,SAAS,EAAEkB,KAAK,CAACnB,WAAN,CAAkBoB,OAFK;AAGlCjB,EAAAA,OAAO,EAAEgB,KAAK,CAACnB,WAAN,CAAkBG;AAHO,CAAZ,CAAxB;;AAMA,MAAMkB,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLvB,IAAAA,SAAS,EAAGwB,YAAD,IAAkBD,QAAQ,CAACzC,cAAc,CAAC0C,YAAD,CAAf,CADhC;AAELrB,IAAAA,OAAO,EAAE,MAAMoB,QAAQ,CAACvC,SAAS,EAAV;AAFlB,GAAP;AAID,CALD;;AAOA,eAAeH,OAAO,CAACsC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CvB,OAA7C,CAAf","sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { FetchOrderData, UserOrderSelection, NewReturn } from '../Actions';\nimport { Redirect, useHistory } from 'react-router-dom';\n\nimport {\n  Button,\n  HelpBlock,\n  FormControl,\n  ControlLabel,\n  FormGroup,\n  FlexboxGrid,\n  Form,\n  Panel,\n  IconButton,\n  Icon,\n} from 'rsuite';\n\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport { userOrder } from '../Reducers/userOrder';\nimport activeReturn from '../Reducers/activeReturn';\n\nconst Returns = ({ UserOrder, activeOrder, isLoading, startUp, message }) => {\n  const [userOrderNumber, setuserOrderNumer] = useState('');\n\n  useEffect(() => {\n    startUp();\n  }, []);\n\n  const history = useHistory();\n\n  console.log(userOrderNumber);\n\n  const HandleSubmit = () => {\n    UserOrder(userOrderNumber);\n  };\n\n  const handleNext = () => {\n    history.push('/myreturns');\n  };\n\n  return (\n    <div>\n      <FlexboxGrid justify='center' align='middle' style={{ height: 600 }}>\n        <FlexboxGrid.Item colspan={18}>\n          <Panel header={<h2>returns</h2>} bordered>\n            <Form\n              onChange={(formValue) => {\n                const value = formValue.orderNumber;\n                setuserOrderNumer(value);\n              }}\n              fluid\n            >\n              <FormGroup>\n                <ControlLabel>Order number</ControlLabel>\n                <FormControl name='orderNumber' />\n                <HelpBlock tooltip>Required</HelpBlock>\n              </FormGroup>\n\n              {message && (\n                <div>\n                  <h4>{message}</h4>\n                </div>\n              )}\n              <FlexboxGrid justify='space-between'>\n                <Button\n                  onClick={HandleSubmit}\n                  style={{ margin: 7 }}\n                  loading={isLoading ? true : false}\n                  disabled={userOrderNumber.length < 10 ? true : false}\n                >\n                  Submit\n                </Button>\n\n                {activeOrder ? (\n                  <IconButton\n                    style={{ margin: 7 }}\n                    onClick={handleNext}\n                    icon={<Icon icon='arrow-right' />}\n                  >\n                    Next\n                  </IconButton>\n                ) : null}\n              </FlexboxGrid>\n            </Form>\n          </Panel>\n        </FlexboxGrid.Item>\n      </FlexboxGrid>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  activeOrder: state.activeOrder.userOrder,\n  isLoading: state.activeOrder.loading,\n  message: state.activeOrder.message,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    UserOrder: (userOrderNum) => dispatch(FetchOrderData(userOrderNum)),\n    startUp: () => dispatch(NewReturn()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Returns);\n"]},"metadata":{},"sourceType":"module"}