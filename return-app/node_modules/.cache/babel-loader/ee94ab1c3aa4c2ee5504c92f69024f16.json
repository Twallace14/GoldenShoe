{"ast":null,"code":"'use strict';\n\n(function () {\n  function _splitDigits(num) {\n    return Array.prototype.map.call((num + '').trim().split(''), function (v) {\n      return parseInt(v, 10);\n    });\n  }\n\n  function _sum(num) {\n    return _splitDigits(num).reduce(function (c, v) {\n      return c + v;\n    });\n  }\n  /**\n   * create check sum.\n   *\n   * @param {string|number} num\n   * @return {number} check sum value\n   */\n\n\n  function checkSum(num) {\n    if (num == null) {\n      return 0;\n    }\n\n    var doubled = _splitDigits(num).reverse().map(function (v, idx) {\n      return idx % 2 === 0 ? v * 2 : v;\n    });\n\n    var sum = doubled.reduce(function (tmp, v) {\n      return tmp + _sum(v);\n    }, 0);\n    var check = 10 - sum % 10;\n    return check === 10 ? 0 : check;\n  }\n  /**\n   * validate num.\n   *\n   * @param {string|number} checkNumber check number\n   * @return {boolean} true: checkNumber is valid\n   */\n\n\n  function isValid(checkNumber) {\n    if (checkNumber == null) {\n      return false;\n    }\n\n    var numbers = _splitDigits(checkNumber);\n\n    return numbers.pop() === checkSum(numbers.join(''));\n  }\n  /**\n   * create generate code\n   *\n   * @param {number} length generage\n   * @return {string} generaged digits value\n   */\n\n\n  function generate(length) {\n    var len = length - 1;\n    var ary = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      ary.push(Math.floor(Math.random() * 10));\n    }\n\n    var num = ary.join('');\n    return num + '' + checkSum(num);\n  }\n\n  module.exports = {\n    isValid: isValid,\n    checkSum: checkSum,\n    generate: generate\n  };\n})();","map":{"version":3,"sources":["/Users/tyronewallace/Desktop/Blueprints/returns/node_modules/generate-serial-number/index.js"],"names":["_splitDigits","num","Array","prototype","map","call","trim","split","v","parseInt","_sum","reduce","c","checkSum","doubled","reverse","idx","sum","tmp","check","isValid","checkNumber","numbers","pop","join","generate","length","len","ary","i","push","Math","floor","random","module","exports"],"mappings":"AAAA;;AAEC,aAAW;AACV,WAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,WAAOC,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyB,CAACJ,GAAG,GAAG,EAAP,EAAWK,IAAX,GAAkBC,KAAlB,CAAwB,EAAxB,CAAzB,EAAsD,UAASC,CAAT,EAAY;AACvE,aAAOC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAf;AACD,KAFM,CAAP;AAGD;;AAED,WAASE,IAAT,CAAcT,GAAd,EAAmB;AACjB,WAAOD,YAAY,CAACC,GAAD,CAAZ,CAAkBU,MAAlB,CAAyB,UAASC,CAAT,EAAYJ,CAAZ,EAAe;AAC7C,aAAOI,CAAC,GAAGJ,CAAX;AACD,KAFM,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASK,QAAT,CAAkBZ,GAAlB,EAAuB;AACrB,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,CAAP;AACD;;AACD,QAAIa,OAAO,GAAGd,YAAY,CAACC,GAAD,CAAZ,CAAkBc,OAAlB,GAA4BX,GAA5B,CAAgC,UAASI,CAAT,EAAYQ,GAAZ,EAAiB;AAC7D,aAAOA,GAAG,GAAG,CAAN,KAAY,CAAZ,GAAgBR,CAAC,GAAG,CAApB,GAAwBA,CAA/B;AACD,KAFa,CAAd;;AAGA,QAAIS,GAAG,GAAGH,OAAO,CAACH,MAAR,CAAe,UAASO,GAAT,EAAcV,CAAd,EAAiB;AACxC,aAAOU,GAAG,GAAGR,IAAI,CAACF,CAAD,CAAjB;AACD,KAFS,EAEP,CAFO,CAAV;AAGA,QAAIW,KAAK,GAAG,KAAMF,GAAG,GAAG,EAAxB;AACA,WAAOE,KAAK,KAAK,EAAV,GAAe,CAAf,GAAmBA,KAA1B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASC,OAAT,CAAiBC,WAAjB,EAA8B;AAC5B,QAAIA,WAAW,IAAI,IAAnB,EAAyB;AACvB,aAAO,KAAP;AACD;;AACD,QAAIC,OAAO,GAAGtB,YAAY,CAACqB,WAAD,CAA1B;;AACA,WAAOC,OAAO,CAACC,GAAR,OAAkBV,QAAQ,CAACS,OAAO,CAACE,IAAR,CAAa,EAAb,CAAD,CAAjC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,QAAIC,GAAG,GAAGD,MAAM,GAAG,CAAnB;AACA,QAAIE,GAAG,GAAG,IAAI1B,KAAJ,CAAUyB,GAAV,CAAV;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5BD,MAAAA,GAAG,CAACE,IAAJ,CAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAT;AACD;;AACD,QAAIhC,GAAG,GAAG2B,GAAG,CAACJ,IAAJ,CAAS,EAAT,CAAV;AACA,WAAOvB,GAAG,GAAG,EAAN,GAAWY,QAAQ,CAACZ,GAAD,CAA1B;AACD;;AAEDiC,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACff,IAAAA,OAAO,EAAEA,OADM;AAEfP,IAAAA,QAAQ,EAAEA,QAFK;AAGfY,IAAAA,QAAQ,EAAEA;AAHK,GAAjB;AAKD,CApEA,GAAD","sourcesContent":["'use strict';\n\n(function() {\n  function _splitDigits(num) {\n    return Array.prototype.map.call((num + '').trim().split(''), function(v) {\n      return parseInt(v, 10);\n    });\n  }\n\n  function _sum(num) {\n    return _splitDigits(num).reduce(function(c, v) {\n      return c + v;\n    });\n  }\n\n  /**\n   * create check sum.\n   *\n   * @param {string|number} num\n   * @return {number} check sum value\n   */\n  function checkSum(num) {\n    if (num == null) {\n      return 0;\n    }\n    var doubled = _splitDigits(num).reverse().map(function(v, idx) {\n      return idx % 2 === 0 ? v * 2 : v;\n    });\n    var sum = doubled.reduce(function(tmp, v) {\n      return tmp + _sum(v);\n    }, 0);\n    var check = 10 - (sum % 10);\n    return check === 10 ? 0 : check;\n  }\n\n  /**\n   * validate num.\n   *\n   * @param {string|number} checkNumber check number\n   * @return {boolean} true: checkNumber is valid\n   */\n  function isValid(checkNumber) {\n    if (checkNumber == null) {\n      return false;\n    }\n    var numbers = _splitDigits(checkNumber);\n    return numbers.pop() === checkSum(numbers.join(''));\n  }\n\n  /**\n   * create generate code\n   *\n   * @param {number} length generage\n   * @return {string} generaged digits value\n   */\n  function generate(length) {\n    var len = length - 1;\n    var ary = new Array(len);\n    for (var i = 0; i < len; i++) {\n      ary.push(Math.floor(Math.random() * 10));\n    }\n    var num = ary.join('');\n    return num + '' + checkSum(num);\n  }\n\n  module.exports = {\n    isValid: isValid,\n    checkSum: checkSum,\n    generate: generate\n  };\n}());\n"]},"metadata":{},"sourceType":"script"}