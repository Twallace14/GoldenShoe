{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tyronewallace/Desktop/Blueprints/returns/src/pages/ItemSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, UseState } from 'react';\nimport ItemCard from '../components/ItemCard';\nimport { connect } from 'react-redux';\nimport { fetchMyOrder, fetch, PostReturnData, PostReturnReasons } from '../Actions';\nimport { reasons } from '../components/reasons';\nimport { HelpBlock, Form, FormControl, FormGroup, IconButton, Icon, FlexboxGrid, Checkbox, InputPicker, CheckboxGroup, Schema, Radio, RadioGroup, Input, Button, Col } from 'rsuite';\nimport { useHistory, useParams } from 'react-router';\n\nconst ItemSelect = ({\n  activeOrder,\n  orderNumber,\n  postReturn,\n  postReasons,\n  returnData\n}) => {\n  _s();\n\n  const {\n    StringType\n  } = Schema.Types;\n  const model = Schema.Model({\n    name: StringType().isRequired('This field is required.'),\n    email: StringType().isEmail('Please enter a valid email address.').isRequired('This field is required.')\n  });\n  const {\n    order\n  } = useParams();\n  const [returnOrder, setReturnOrder] = useState();\n  const [returnitems, setReturnitems] = useState([]);\n  const [formError, setFormError] = useState();\n  const show = activeOrder;\n  const returnInfo = {};\n  returnInfo.name = returnOrder ? returnOrder.name : null;\n  returnInfo.items = returnitems;\n  returnInfo.contact = returnOrder ? returnOrder.email : null;\n  const history = useHistory();\n\n  const handleConfirm = () => {\n    postReturn(returnInfo);\n  };\n\n  const handleNext = () => {//  postReturn(returnOrder);\n  };\n\n  const handleBack = () => {\n    history.goBack();\n  };\n\n  console.log(returnInfo.items);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FlexboxGrid, {\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(FlexboxGrid.Item, {\n        colspan: 18,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Returns\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexboxGrid.Item, {\n        colspan: 18,\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Order Number: \", returnData]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexboxGrid.Item, {\n        colspan: 20,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onCheck: formError => {\n            setFormError(formError);\n          },\n          model: model,\n          fluid: true,\n          onChange: formValue => {\n            setReturnOrder(formValue);\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            name: \"items\",\n            children: show && show.map((items, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 400\n                },\n                children: /*#__PURE__*/_jsxDEV(FlexboxGrid, {\n                  justify: \"center\",\n                  align: \"top\",\n                  children: [/*#__PURE__*/_jsxDEV(FlexboxGrid.Item, {\n                    colspan: 20,\n                    children: /*#__PURE__*/_jsxDEV(ItemCard, {\n                      items: items,\n                      style: {\n                        margin: 24\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(FlexboxGrid.Item, {\n                    colspan: 16,\n                    children: /*#__PURE__*/_jsxDEV(InputPicker, {\n                      style: {\n                        margin: 24\n                      },\n                      cleanable: false,\n                      data: reasons,\n                      onChange: value => {\n                        let newArr = [...returnitems];\n                        newArr[index] = {\n                          reason: value,\n                          item: items.itemid,\n                          itemName: items.itemname,\n                          colour: items.colour,\n                          size: items.size\n                        };\n                        setReturnitems(newArr);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 23\n                }, this)\n              }, items.itemid, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            name: \"info\",\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              name: \"email\",\n              placeholder: \"Email\",\n              plaintextDefaultValue: \"insert name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HelpBlock, {\n              tooltip: true,\n              children: \"This is how we will contact you if needed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              name: \"name\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HelpBlock, {\n              tooltip: true,\n              children: \"This field is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: /*#__PURE__*/_jsxDEV(FlexboxGrid, {\n              justify: \"space-around\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleConfirm,\n                style: {\n                  margin: 7\n                },\n                disabled: !returnInfo.name || !returnInfo.contact || !returnInfo.items.length || formError.email,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), returnData ? /*#__PURE__*/_jsxDEV(IconButton, {\n                style: {\n                  margin: 7\n                },\n                onClick: handleNext,\n                icon: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: \"arrow-right\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 27\n                }, this),\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemSelect, \"kMbXMq05oty1ZvLkbhe+FiCk+BA=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = ItemSelect;\n\nconst mapStateToProps = state => ({\n  // returnData: state.activeReturn.retunNo,\n  activeOrder: state.activeOrder.basket,\n  returnData: state.returnOrder.returnNo\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postReturn: returnInfo => dispatch(PostReturnData(returnInfo))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemSelect);\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemSelect\");","map":{"version":3,"sources":["/Users/tyronewallace/Desktop/Blueprints/returns/src/pages/ItemSelect.js"],"names":["React","useState","UseState","ItemCard","connect","fetchMyOrder","fetch","PostReturnData","PostReturnReasons","reasons","HelpBlock","Form","FormControl","FormGroup","IconButton","Icon","FlexboxGrid","Checkbox","InputPicker","CheckboxGroup","Schema","Radio","RadioGroup","Input","Button","Col","useHistory","useParams","ItemSelect","activeOrder","orderNumber","postReturn","postReasons","returnData","StringType","Types","model","Model","name","isRequired","email","isEmail","order","returnOrder","setReturnOrder","returnitems","setReturnitems","formError","setFormError","show","returnInfo","items","contact","history","handleConfirm","handleNext","handleBack","goBack","console","log","formValue","map","index","width","margin","value","newArr","reason","item","itemid","itemName","itemname","colour","size","length","mapStateToProps","state","basket","returnNo","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, UseState } from 'react';\nimport ItemCard from '../components/ItemCard';\nimport { connect } from 'react-redux';\nimport {\n  fetchMyOrder,\n  fetch,\n  PostReturnData,\n  PostReturnReasons,\n} from '../Actions';\nimport { reasons } from '../components/reasons';\n\nimport {\n  HelpBlock,\n  Form,\n  FormControl,\n  FormGroup,\n  IconButton,\n  Icon,\n  FlexboxGrid,\n  Checkbox,\n  InputPicker,\n  CheckboxGroup,\n  Schema,\n  Radio,\n  RadioGroup,\n  Input,\n  Button,\n  Col,\n} from 'rsuite';\nimport { useHistory, useParams } from 'react-router';\n\nconst ItemSelect = ({\n  activeOrder,\n  orderNumber,\n  postReturn,\n  postReasons,\n  returnData,\n}) => {\n  const { StringType } = Schema.Types;\n  const model = Schema.Model({\n    name: StringType().isRequired('This field is required.'),\n    email: StringType()\n      .isEmail('Please enter a valid email address.')\n      .isRequired('This field is required.'),\n  });\n\n  const { order } = useParams();\n\n  const [returnOrder, setReturnOrder] = useState();\n  const [returnitems, setReturnitems] = useState([]);\n  const [formError, setFormError] = useState();\n\n  const show = activeOrder;\n\n  const returnInfo = {};\n\n  returnInfo.name = returnOrder ? returnOrder.name : null;\n  returnInfo.items = returnitems;\n  returnInfo.contact = returnOrder ? returnOrder.email : null;\n\n  const history = useHistory();\n\n  const handleConfirm = () => {\n    postReturn(returnInfo);\n  };\n\n  const handleNext = () => {\n    //  postReturn(returnOrder);\n  };\n\n  const handleBack = () => {\n    history.goBack();\n  };\n\n  console.log(returnInfo.items);\n\n  return (\n    <div>\n      <FlexboxGrid justify='center'>\n        <FlexboxGrid.Item colspan={18}>\n          <h1>Returns</h1>\n        </FlexboxGrid.Item>\n        <FlexboxGrid.Item colspan={18}>\n          <h4>Order Number: {returnData}</h4>\n        </FlexboxGrid.Item>\n        <FlexboxGrid.Item colspan={20}>\n          <Form\n            onCheck={(formError) => {\n              setFormError(formError);\n            }}\n            model={model}\n            fluid\n            onChange={(formValue) => {\n              setReturnOrder(formValue);\n            }}\n          >\n            <FormGroup name='items'>\n              {show &&\n                show.map((items, index) => {\n                  return (\n                    <div key={items.itemid} style={{ width: 400 }}>\n                      <FlexboxGrid justify='center' align='top'>\n                        <FlexboxGrid.Item colspan={20}>\n                          <ItemCard items={items} style={{ margin: 24 }} />\n                        </FlexboxGrid.Item>\n                        <FlexboxGrid.Item colspan={16}>\n                          <InputPicker\n                            style={{ margin: 24 }}\n                            cleanable={false}\n                            data={reasons}\n                            onChange={(value) => {\n                              let newArr = [...returnitems];\n                              newArr[index] = {\n                                reason: value,\n                                item: items.itemid,\n                                itemName: items.itemname,\n                                colour: items.colour,\n                                size: items.size,\n                              };\n                              setReturnitems(newArr);\n                            }}\n                          />\n                        </FlexboxGrid.Item>\n                      </FlexboxGrid>\n                    </div>\n                  );\n                })}\n            </FormGroup>\n\n            <FormGroup name='info'>\n              <FormControl\n                name='email'\n                placeholder='Email'\n                plaintextDefaultValue='insert name'\n              />\n              <HelpBlock tooltip>\n                This is how we will contact you if needed\n              </HelpBlock>\n            </FormGroup>\n\n            <FormGroup>\n              <FormControl name='name' placeholder='Name' />\n              <HelpBlock tooltip>This field is required</HelpBlock>\n            </FormGroup>\n\n            <FormGroup>\n              <FlexboxGrid justify='space-around'>\n                <Button\n                  onClick={handleConfirm}\n                  style={{ margin: 7 }}\n                  disabled={\n                    !returnInfo.name ||\n                    !returnInfo.contact ||\n                    !returnInfo.items.length ||\n                    formError.email\n                  }\n                >\n                  Submit\n                </Button>\n\n                {returnData ? (\n                  <IconButton\n                    style={{ margin: 7 }}\n                    onClick={handleNext}\n                    icon={<Icon icon='arrow-right' />}\n                  >\n                    Next\n                  </IconButton>\n                ) : null}\n              </FlexboxGrid>\n            </FormGroup>\n          </Form>\n        </FlexboxGrid.Item>\n      </FlexboxGrid>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  // returnData: state.activeReturn.retunNo,\n  activeOrder: state.activeOrder.basket,\n  returnData: state.returnOrder.returnNo,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    postReturn: (returnInfo) => dispatch(PostReturnData(returnInfo)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemSelect);\n"]},"metadata":{},"sourceType":"module"}