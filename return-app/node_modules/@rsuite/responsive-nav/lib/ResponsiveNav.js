"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.array.flat");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _elementResizeEvent = _interopRequireWildcard(require("element-resize-event"));

var _rsuite = require("rsuite");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var iconStyle = {
  fontSize: 12,
  marginLeft: 4,
  width: 12
};

function getUnhandledProps(props) {
  var nextProps = {};
  var keys = Object.keys(ResponsiveNav.propTypes);
  Object.entries(props).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    if (keys.indexOf(key) === -1) {
      nextProps[key] = value;
    }
  });
  return nextProps;
}

var ResponsiveNav =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ResponsiveNav, _React$Component);

  function ResponsiveNav(props) {
    var _this;

    _classCallCheck(this, ResponsiveNav);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveNav).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleResize", function () {
      var items = _this.wrapper.querySelectorAll('.rs-nav-item');

      var width = _rsuite.DOMHelper.getWidth(_this.wrapper);

      var contentWidth = 0;
      var itemWidthList = [];
      Array.from(items).forEach(function (element) {
        var w = _rsuite.DOMHelper.getWidth(element);

        contentWidth += w;
        itemWidthList.push(w);
      });

      _this.setState({
        width: width,
        contentWidth: contentWidth,
        itemWidthList: itemWidthList
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleRemove", function (eventKey, event) {
      event.stopPropagation();
      var onItemRemove = _this.props.onItemRemove;
      onItemRemove && onItemRemove(eventKey);
    });

    _defineProperty(_assertThisInitialized(_this), "wrapper", null);

    _defineProperty(_assertThisInitialized(_this), "bindWrapperRef", function (ref) {
      _this.wrapper = ref;
    });

    _defineProperty(_assertThisInitialized(_this), "moreItem", null);

    _defineProperty(_assertThisInitialized(_this), "bindMoreItemRef", function (ref) {
      _this.moreItem = ref;
    });

    _this.state = {
      width: 0,
      contentWidth: 0,
      itemWidthList: [],
      moreWidth: 0
    };
    return _this;
  }

  _createClass(ResponsiveNav, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.wrapper) {
        this.handleResize();
        (0, _elementResizeEvent.default)(this.wrapper, this.handleResize);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.moreItem && this.state.moreWidth === 0) {
        this.setState({
          moreWidth: _rsuite.DOMHelper.getWidth(_reactDom.default.findDOMNode(this.moreItem))
        });
      }

      if (Array.isArray(prevProps.children) && Array.isArray(this.props.children) && prevProps.children.flat().length !== this.props.children.flat().length) {
        this.handleResize();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.wrapper) {
        (0, _elementResizeEvent.unbind)(this.wrapper);
      }
    }
  }, {
    key: "renderPlaceholder",
    value: function renderPlaceholder() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          removable = _this$props.removable;
      var rest = getUnhandledProps(this.props);
      var styles = {
        height: 0,
        overflow: 'hidden'
      };
      return _react.default.createElement("div", {
        ref: this.bindWrapperRef,
        style: styles
      }, _react.default.createElement(_rsuite.Nav, rest, removable ? children.map(function (item, key) {
        return _react.default.cloneElement(item, {
          key: key,
          children: _this2.renderIcon(item)
        });
      }) : children));
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this3 = this;

      var _this$state = this.state,
          width = _this$state.width,
          contentWidth = _this$state.contentWidth,
          itemWidthList = _this$state.itemWidthList,
          moreWidth = _this$state.moreWidth;
      var _this$props2 = this.props,
          children = _this$props2.children,
          activeKey = _this$props2.activeKey,
          removable = _this$props2.removable,
          moreText = _this$props2.moreText,
          moreProps = _this$props2.moreProps;
      var items = [];

      if (contentWidth <= width) {
        items = children;
      } else {
        var rangeWidth = 0;
        var dropdownItems = [];

        _react.default.Children.forEach(children, function (child, index) {
          var itemWidth = itemWidthList[index];
          rangeWidth += itemWidth;

          if (rangeWidth < width) {
            items.push(child);
          } else {
            dropdownItems.push(child);
          }
        });

        if (dropdownItems.length) {
          dropdownItems.splice(0, 0, items.pop());
          var k = 0;

          for (var i = 0; i < items.length; i++) {
            k += itemWidthList[i];
          }

          if (moreWidth + k > width) {
            dropdownItems.splice(0, 0, items.pop());
          }

          if (items[items.length - 1]) {
            dropdownItems.splice(0, 0, items[items.length - 1]);
          }

          var activeItem = dropdownItems.find(function (item) {
            return item && item.props.eventKey === activeKey;
          });

          if (activeItem) {
            items.splice(items.length - 1, 1, activeItem);
          }

          items.push(_react.default.createElement(_rsuite.Dropdown, _extends({}, moreProps, {
            title: moreText,
            key: "more",
            ref: this.bindMoreItemRef
          }), dropdownItems.map(function (child, index) {
            if (!child) {
              return null;
            }

            var _child$props = child.props,
                itemChildren = _child$props.children,
                classPrefix = _child$props.classPrefix,
                eventKey = _child$props.eventKey,
                itemRest = _objectWithoutProperties(_child$props, ["children", "classPrefix", "eventKey"]);

            return _react.default.createElement(_rsuite.Dropdown.Item, _extends({
              key: eventKey || index,
              eventKey: eventKey
            }, itemRest), itemChildren);
          })));
        }
      }

      if (removable) {
        return items.map(function (item, key) {
          if (~item.type.displayName.indexOf('NavItem')) {
            return _react.default.cloneElement(item, {
              key: key,
              children: _this3.renderIcon(item)
            });
          }

          return item;
        });
      }

      return items;
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(item) {
      var activeKey = this.props.activeKey;
      var eventKey = item.props.eventKey;
      var nextIconStyle = iconStyle;

      if (activeKey === eventKey) {
        nextIconStyle = Object.assign({
          color: '#f44336'
        }, iconStyle);
      }

      return _react.default.createElement(_react.default.Fragment, null, item.props.children, ' ', _react.default.createElement(_rsuite.Icon, {
        onClick: this.handleRemove.bind(this, eventKey),
        icon: "close",
        style: nextIconStyle
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var activeKey = this.props.activeKey;
      var rest = getUnhandledProps(this.props);
      return _react.default.createElement("div", null, this.renderPlaceholder(), _react.default.createElement(_rsuite.Nav, _extends({
        activeKey: activeKey
      }, rest), this.renderChildren()));
    }
  }]);

  return ResponsiveNav;
}(_react.default.Component);

_defineProperty(ResponsiveNav, "propTypes", {
  removable: _propTypes.default.bool,
  onItemRemove: _propTypes.default.func,
  activeKey: _propTypes.default.string,
  children: _propTypes.default.node,
  moreText: _propTypes.default.node,
  moreProps: _propTypes.default.object
});

_defineProperty(ResponsiveNav, "defaultProps", {
  moreText: 'More'
});

ResponsiveNav.Item = _rsuite.Nav.Item;
var _default = ResponsiveNav;
exports.default = _default;